"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.find = void 0;
const SourceUnitNode_1 = require("@analyzer/nodes/SourceUnitNode");
const PragmaDirectiveNode_1 = require("@analyzer/nodes/PragmaDirectiveNode");
const ImportDirectiveNode_1 = require("@analyzer/nodes/ImportDirectiveNode");
const ContractDefinitionNode_1 = require("@analyzer/nodes/ContractDefinitionNode");
const InheritanceSpecifierNode_1 = require("@analyzer/nodes/InheritanceSpecifierNode");
const StateVariableDeclarationNode_1 = require("@analyzer/nodes/StateVariableDeclarationNode");
const UsingForDeclarationNode_1 = require("@analyzer/nodes/UsingForDeclarationNode");
const StructDefinitionNode_1 = require("@analyzer/nodes/StructDefinitionNode");
const ModifierDefinitionNode_1 = require("@analyzer/nodes/ModifierDefinitionNode");
const ModifierInvocationNode_1 = require("@analyzer/nodes/ModifierInvocationNode");
const FunctionDefinitionNode_1 = require("@analyzer/nodes/FunctionDefinitionNode");
const EventDefinitionNode_1 = require("@analyzer/nodes/EventDefinitionNode");
const EnumValueNode_1 = require("@analyzer/nodes/EnumValueNode");
const EnumDefinitionNode_1 = require("@analyzer/nodes/EnumDefinitionNode");
const VariableDeclarationNode_1 = require("@analyzer/nodes/VariableDeclarationNode");
const UserDefinedTypeNameNode_1 = require("@analyzer/nodes/UserDefinedTypeNameNode");
const ArrayTypeNameNode_1 = require("@analyzer/nodes/ArrayTypeNameNode");
const MappingNode_1 = require("@analyzer/nodes/MappingNode");
const ElementaryTypeNameNode_1 = require("@analyzer/nodes/ElementaryTypeNameNode");
const FunctionTypeNameNode_1 = require("@analyzer/nodes/FunctionTypeNameNode");
const BlockNode_1 = require("@analyzer/nodes/BlockNode");
const ExpressionStatementNode_1 = require("@analyzer/nodes/ExpressionStatementNode");
const IfStatementNode_1 = require("@analyzer/nodes/IfStatementNode");
const UncheckedStatementNode_1 = require("@analyzer/nodes/UncheckedStatementNode");
const WhileStatementNode_1 = require("@analyzer/nodes/WhileStatementNode");
const ForStatementNode_1 = require("@analyzer/nodes/ForStatementNode");
const InlineAssemblyStatementNode_1 = require("@analyzer/nodes/InlineAssemblyStatementNode");
const DoWhileStatementNode_1 = require("@analyzer/nodes/DoWhileStatementNode");
const ContinueStatementNode_1 = require("@analyzer/nodes/ContinueStatementNode");
const BreakNode_1 = require("@analyzer/nodes/BreakNode");
const ContinueNode_1 = require("@analyzer/nodes/ContinueNode");
const BreakStatementNode_1 = require("@analyzer/nodes/BreakStatementNode");
const ReturnStatementNode_1 = require("@analyzer/nodes/ReturnStatementNode");
const EmitStatementNode_1 = require("@analyzer/nodes/EmitStatementNode");
const ThrowStatementNode_1 = require("@analyzer/nodes/ThrowStatementNode");
const VariableDeclarationStatementNode_1 = require("@analyzer/nodes/VariableDeclarationStatementNode");
const FunctionCallNode_1 = require("@analyzer/nodes/FunctionCallNode");
const AssemblyBlockNode_1 = require("@analyzer/nodes/AssemblyBlockNode");
const AssemblyCallNode_1 = require("@analyzer/nodes/AssemblyCallNode");
const AssemblyLocalDefinitionNode_1 = require("@analyzer/nodes/AssemblyLocalDefinitionNode");
const AssemblyAssignmentNode_1 = require("@analyzer/nodes/AssemblyAssignmentNode");
const AssemblyStackAssignmentNode_1 = require("@analyzer/nodes/AssemblyStackAssignmentNode");
const LabelDefinitionNode_1 = require("@analyzer/nodes/LabelDefinitionNode");
const AssemblySwitchNode_1 = require("@analyzer/nodes/AssemblySwitchNode");
const AssemblyCaseNode_1 = require("@analyzer/nodes/AssemblyCaseNode");
const AssemblyFunctionDefinitionNode_1 = require("@analyzer/nodes/AssemblyFunctionDefinitionNode");
const AssemblyFunctionReturnsNode_1 = require("@analyzer/nodes/AssemblyFunctionReturnsNode");
const AssemblyForNode_1 = require("@analyzer/nodes/AssemblyForNode");
const AssemblyIfNode_1 = require("@analyzer/nodes/AssemblyIfNode");
const SubAssemblyNode_1 = require("@analyzer/nodes/SubAssemblyNode");
const NewExpressionNode_1 = require("@analyzer/nodes/NewExpressionNode");
const TupleExpressionNode_1 = require("@analyzer/nodes/TupleExpressionNode");
const TypeNameExpressionNode_1 = require("@analyzer/nodes/TypeNameExpressionNode");
const NameValueExpressionNode_1 = require("@analyzer/nodes/NameValueExpressionNode");
const NumberLiteralNode_1 = require("@analyzer/nodes/NumberLiteralNode");
const BooleanLiteralNode_1 = require("@analyzer/nodes/BooleanLiteralNode");
const HexLiteralNode_1 = require("@analyzer/nodes/HexLiteralNode");
const StringLiteralNode_1 = require("@analyzer/nodes/StringLiteralNode");
const IdentifierNode_1 = require("@analyzer/nodes/IdentifierNode");
const BinaryOperationNode_1 = require("@analyzer/nodes/BinaryOperationNode");
const UnaryOperationNode_1 = require("@analyzer/nodes/UnaryOperationNode");
const ConditionalNode_1 = require("@analyzer/nodes/ConditionalNode");
const IndexAccessNode_1 = require("@analyzer/nodes/IndexAccessNode");
const IndexRangeAccessNode_1 = require("@analyzer/nodes/IndexRangeAccessNode");
const MemberAccessNode_1 = require("@analyzer/nodes/MemberAccessNode");
const HexNumberNode_1 = require("@analyzer/nodes/HexNumberNode");
const DecimalNumberNode_1 = require("@analyzer/nodes/DecimalNumberNode");
const TryStatementNode_1 = require("@analyzer/nodes/TryStatementNode");
const NameValueListNode_1 = require("@analyzer/nodes/NameValueListNode");
const AssemblyMemberAccessNode_1 = require("@analyzer/nodes/AssemblyMemberAccessNode");
const CatchClauseNode_1 = require("@analyzer/nodes/CatchClauseNode");
const FileLevelConstantNode_1 = require("@analyzer/nodes/FileLevelConstantNode");
const CustomErrorDefinitionNode_1 = require("@analyzer/nodes/CustomErrorDefinitionNode");
const RevertStatementNode_1 = require("@analyzer/nodes/RevertStatementNode");
function matcher(pattern) {
    return (ast, uri, rootPath, documentsAnalyzer) => pattern[ast.type](ast, uri, rootPath, documentsAnalyzer);
}
exports.find = matcher({
    SourceUnit: (sourceUnit, uri, rootPath, documentsAnalyzer) => new SourceUnitNode_1.SourceUnitNode(sourceUnit, uri, rootPath, documentsAnalyzer),
    PragmaDirective: (pragmaDirective, uri, rootPath, documentsAnalyzer) => new PragmaDirectiveNode_1.PragmaDirectiveNode(pragmaDirective, uri, rootPath, documentsAnalyzer),
    ImportDirective: (importDirective, uri, rootPath, documentsAnalyzer) => new ImportDirectiveNode_1.ImportDirectiveNode(importDirective, uri, rootPath, documentsAnalyzer),
    ContractDefinition: (contractDefinition, uri, rootPath, documentsAnalyzer) => new ContractDefinitionNode_1.ContractDefinitionNode(contractDefinition, uri, rootPath, documentsAnalyzer),
    InheritanceSpecifier: (inheritanceSpecifier, uri, rootPath, documentsAnalyzer) => new InheritanceSpecifierNode_1.InheritanceSpecifierNode(inheritanceSpecifier, uri, rootPath, documentsAnalyzer),
    StateVariableDeclaration: (stateVariableDeclaration, uri, rootPath, documentsAnalyzer) => new StateVariableDeclarationNode_1.StateVariableDeclarationNode(stateVariableDeclaration, uri, rootPath, documentsAnalyzer),
    UsingForDeclaration: (usingForDeclaration, uri, rootPath, documentsAnalyzer) => new UsingForDeclarationNode_1.UsingForDeclarationNode(usingForDeclaration, uri, rootPath, documentsAnalyzer),
    StructDefinition: (structDefinition, uri, rootPath, documentsAnalyzer) => new StructDefinitionNode_1.StructDefinitionNode(structDefinition, uri, rootPath, documentsAnalyzer),
    ModifierDefinition: (modifierDefinition, uri, rootPath, documentsAnalyzer) => new ModifierDefinitionNode_1.ModifierDefinitionNode(modifierDefinition, uri, rootPath, documentsAnalyzer),
    ModifierInvocation: (modifierInvocation, uri, rootPath, documentsAnalyzer) => new ModifierInvocationNode_1.ModifierInvocationNode(modifierInvocation, uri, rootPath, documentsAnalyzer),
    FunctionDefinition: (functionDefinition, uri, rootPath, documentsAnalyzer) => new FunctionDefinitionNode_1.FunctionDefinitionNode(functionDefinition, uri, rootPath, documentsAnalyzer),
    EventDefinition: (eventDefinition, uri, rootPath, documentsAnalyzer) => new EventDefinitionNode_1.EventDefinitionNode(eventDefinition, uri, rootPath, documentsAnalyzer),
    EnumValue: (enumValue, uri, rootPath, documentsAnalyzer) => new EnumValueNode_1.EnumValueNode(enumValue, uri, rootPath, documentsAnalyzer),
    EnumDefinition: (enumDefinition, uri, rootPath, documentsAnalyzer) => new EnumDefinitionNode_1.EnumDefinitionNode(enumDefinition, uri, rootPath, documentsAnalyzer),
    VariableDeclaration: (variableDeclaration, uri, rootPath, documentsAnalyzer) => new VariableDeclarationNode_1.VariableDeclarationNode(variableDeclaration, uri, rootPath, documentsAnalyzer),
    UserDefinedTypeName: (userDefinedTypeName, uri, rootPath, documentsAnalyzer) => new UserDefinedTypeNameNode_1.UserDefinedTypeNameNode(userDefinedTypeName, uri, rootPath, documentsAnalyzer),
    ArrayTypeName: (arrayTypeName, uri, rootPath, documentsAnalyzer) => new ArrayTypeNameNode_1.ArrayTypeNameNode(arrayTypeName, uri, rootPath, documentsAnalyzer),
    Mapping: (mapping, uri, rootPath, documentsAnalyzer) => new MappingNode_1.MappingNode(mapping, uri, rootPath, documentsAnalyzer),
    ElementaryTypeName: (elementaryTypeName, uri, rootPath, documentsAnalyzer) => new ElementaryTypeNameNode_1.ElementaryTypeNameNode(elementaryTypeName, uri, rootPath, documentsAnalyzer),
    FunctionTypeName: (functionTypeName, uri, rootPath, documentsAnalyzer) => new FunctionTypeNameNode_1.FunctionTypeNameNode(functionTypeName, uri, rootPath, documentsAnalyzer),
    Block: (block, uri, rootPath, documentsAnalyzer) => new BlockNode_1.BlockNode(block, uri, rootPath, documentsAnalyzer),
    ExpressionStatement: (expressionStatement, uri, rootPath, documentsAnalyzer) => new ExpressionStatementNode_1.ExpressionStatementNode(expressionStatement, uri, rootPath, documentsAnalyzer),
    IfStatement: (ifStatement, uri, rootPath, documentsAnalyzer) => new IfStatementNode_1.IfStatementNode(ifStatement, uri, rootPath, documentsAnalyzer),
    UncheckedStatement: (uncheckedStatement, uri, rootPath, documentsAnalyzer) => new UncheckedStatementNode_1.UncheckedStatementNode(uncheckedStatement, uri, rootPath, documentsAnalyzer),
    WhileStatement: (whileStatement, uri, rootPath, documentsAnalyzer) => new WhileStatementNode_1.WhileStatementNode(whileStatement, uri, rootPath, documentsAnalyzer),
    ForStatement: (forStatement, uri, rootPath, documentsAnalyzer) => new ForStatementNode_1.ForStatementNode(forStatement, uri, rootPath, documentsAnalyzer),
    InlineAssemblyStatement: (inlineAssemblyStatement, uri, rootPath, documentsAnalyzer) => new InlineAssemblyStatementNode_1.InlineAssemblyStatementNode(inlineAssemblyStatement, uri, rootPath, documentsAnalyzer),
    DoWhileStatement: (doWhileStatement, uri, rootPath, documentsAnalyzer) => new DoWhileStatementNode_1.DoWhileStatementNode(doWhileStatement, uri, rootPath, documentsAnalyzer),
    ContinueStatement: (continueStatement, uri, rootPath, documentsAnalyzer) => new ContinueStatementNode_1.ContinueStatementNode(continueStatement, uri, rootPath, documentsAnalyzer),
    Break: (astBreak, uri, rootPath, documentsAnalyzer) => new BreakNode_1.BreakNode(astBreak, uri, rootPath, documentsAnalyzer),
    Continue: (astContinue, uri, rootPath, documentsAnalyzer) => new ContinueNode_1.ContinueNode(astContinue, uri, rootPath, documentsAnalyzer),
    BreakStatement: (breakStatement, uri, rootPath, documentsAnalyzer) => new BreakStatementNode_1.BreakStatementNode(breakStatement, uri, rootPath, documentsAnalyzer),
    ReturnStatement: (returnStatement, uri, rootPath, documentsAnalyzer) => new ReturnStatementNode_1.ReturnStatementNode(returnStatement, uri, rootPath, documentsAnalyzer),
    EmitStatement: (emitStatement, uri, rootPath, documentsAnalyzer) => new EmitStatementNode_1.EmitStatementNode(emitStatement, uri, rootPath, documentsAnalyzer),
    ThrowStatement: (throwStatement, uri, rootPath, documentsAnalyzer) => new ThrowStatementNode_1.ThrowStatementNode(throwStatement, uri, rootPath, documentsAnalyzer),
    VariableDeclarationStatement: (variableDeclarationStatement, uri, rootPath, documentsAnalyzer) => new VariableDeclarationStatementNode_1.VariableDeclarationStatementNode(variableDeclarationStatement, uri, rootPath, documentsAnalyzer),
    FunctionCall: (functionCall, uri, rootPath, documentsAnalyzer) => new FunctionCallNode_1.FunctionCallNode(functionCall, uri, rootPath, documentsAnalyzer),
    AssemblyBlock: (assemblyBlock, uri, rootPath, documentsAnalyzer) => new AssemblyBlockNode_1.AssemblyBlockNode(assemblyBlock, uri, rootPath, documentsAnalyzer),
    AssemblyCall: (assemblyCall, uri, rootPath, documentsAnalyzer) => new AssemblyCallNode_1.AssemblyCallNode(assemblyCall, uri, rootPath, documentsAnalyzer),
    AssemblyLocalDefinition: (assemblyLocalDefinition, uri, rootPath, documentsAnalyzer) => new AssemblyLocalDefinitionNode_1.AssemblyLocalDefinitionNode(assemblyLocalDefinition, uri, rootPath, documentsAnalyzer),
    AssemblyAssignment: (assemblyAssignment, uri, rootPath, documentsAnalyzer) => new AssemblyAssignmentNode_1.AssemblyAssignmentNode(assemblyAssignment, uri, rootPath, documentsAnalyzer),
    AssemblyStackAssignment: (assemblyStackAssignment, uri, rootPath, documentsAnalyzer) => new AssemblyStackAssignmentNode_1.AssemblyStackAssignmentNode(assemblyStackAssignment, uri, rootPath, documentsAnalyzer),
    LabelDefinition: (labelDefinition, uri, rootPath, documentsAnalyzer) => new LabelDefinitionNode_1.LabelDefinitionNode(labelDefinition, uri, rootPath, documentsAnalyzer),
    AssemblySwitch: (assemblySwitch, uri, rootPath, documentsAnalyzer) => new AssemblySwitchNode_1.AssemblySwitchNode(assemblySwitch, uri, rootPath, documentsAnalyzer),
    AssemblyCase: (assemblyCase, uri, rootPath, documentsAnalyzer) => new AssemblyCaseNode_1.AssemblyCaseNode(assemblyCase, uri, rootPath, documentsAnalyzer),
    AssemblyFunctionDefinition: (assemblyFunctionDefinition, uri, rootPath, documentsAnalyzer) => new AssemblyFunctionDefinitionNode_1.AssemblyFunctionDefinitionNode(assemblyFunctionDefinition, uri, rootPath, documentsAnalyzer),
    AssemblyFunctionReturns: (assemblyFunctionReturns, uri, rootPath, documentsAnalyzer) => new AssemblyFunctionReturnsNode_1.AssemblyFunctionReturnsNode(assemblyFunctionReturns, uri, rootPath, documentsAnalyzer),
    AssemblyFor: (assemblyFor, uri, rootPath, documentsAnalyzer) => new AssemblyForNode_1.AssemblyForNode(assemblyFor, uri, rootPath, documentsAnalyzer),
    AssemblyIf: (assemblyIf, uri, rootPath, documentsAnalyzer) => new AssemblyIfNode_1.AssemblyIfNode(assemblyIf, uri, rootPath, documentsAnalyzer),
    SubAssembly: (subAssembly, uri, rootPath, documentsAnalyzer) => new SubAssemblyNode_1.SubAssemblyNode(subAssembly, uri, rootPath, documentsAnalyzer),
    NewExpression: (newExpression, uri, rootPath, documentsAnalyzer) => new NewExpressionNode_1.NewExpressionNode(newExpression, uri, rootPath, documentsAnalyzer),
    TupleExpression: (tupleExpression, uri, rootPath, documentsAnalyzer) => new TupleExpressionNode_1.TupleExpressionNode(tupleExpression, uri, rootPath, documentsAnalyzer),
    TypeNameExpression: (typeNameExpression, uri, rootPath, documentsAnalyzer) => new TypeNameExpressionNode_1.TypeNameExpressionNode(typeNameExpression, uri, rootPath, documentsAnalyzer),
    NameValueExpression: (nameValueExpression, uri, rootPath, documentsAnalyzer) => new NameValueExpressionNode_1.NameValueExpressionNode(nameValueExpression, uri, rootPath, documentsAnalyzer),
    NumberLiteral: (numberLiteral, uri, rootPath, documentsAnalyzer) => new NumberLiteralNode_1.NumberLiteralNode(numberLiteral, uri, rootPath, documentsAnalyzer),
    BooleanLiteral: (booleanLiteral, uri, rootPath, documentsAnalyzer) => new BooleanLiteralNode_1.BooleanLiteralNode(booleanLiteral, uri, rootPath, documentsAnalyzer),
    HexLiteral: (hexLiteral, uri, rootPath, documentsAnalyzer) => new HexLiteralNode_1.HexLiteralNode(hexLiteral, uri, rootPath, documentsAnalyzer),
    StringLiteral: (stringLiteral, uri, rootPath, documentsAnalyzer) => new StringLiteralNode_1.StringLiteralNode(stringLiteral, uri, rootPath, documentsAnalyzer),
    Identifier: (identifier, uri, rootPath, documentsAnalyzer) => new IdentifierNode_1.IdentifierNode(identifier, uri, rootPath, documentsAnalyzer),
    BinaryOperation: (binaryOperation, uri, rootPath, documentsAnalyzer) => new BinaryOperationNode_1.BinaryOperationNode(binaryOperation, uri, rootPath, documentsAnalyzer),
    UnaryOperation: (unaryOperation, uri, rootPath, documentsAnalyzer) => new UnaryOperationNode_1.UnaryOperationNode(unaryOperation, uri, rootPath, documentsAnalyzer),
    Conditional: (conditional, uri, rootPath, documentsAnalyzer) => new ConditionalNode_1.ConditionalNode(conditional, uri, rootPath, documentsAnalyzer),
    IndexAccess: (indexAccess, uri, rootPath, documentsAnalyzer) => new IndexAccessNode_1.IndexAccessNode(indexAccess, uri, rootPath, documentsAnalyzer),
    IndexRangeAccess: (indexRangeAccess, uri, rootPath, documentsAnalyzer) => new IndexRangeAccessNode_1.IndexRangeAccessNode(indexRangeAccess, uri, rootPath, documentsAnalyzer),
    MemberAccess: (memberAccess, uri, rootPath, documentsAnalyzer) => new MemberAccessNode_1.MemberAccessNode(memberAccess, uri, rootPath, documentsAnalyzer),
    HexNumber: (hexNumber, uri, rootPath, documentsAnalyzer) => new HexNumberNode_1.HexNumberNode(hexNumber, uri, rootPath, documentsAnalyzer),
    DecimalNumber: (decimalNumber, uri, rootPath, documentsAnalyzer) => new DecimalNumberNode_1.DecimalNumberNode(decimalNumber, uri, rootPath, documentsAnalyzer),
    TryStatement: (tryStatement, uri, rootPath, documentsAnalyzer) => new TryStatementNode_1.TryStatementNode(tryStatement, uri, rootPath, documentsAnalyzer),
    NameValueList: (nameValueList, uri, rootPath, documentsAnalyzer) => new NameValueListNode_1.NameValueListNode(nameValueList, uri, rootPath, documentsAnalyzer),
    AssemblyMemberAccess: (assemblyMemberAccess, uri, rootPath, documentsAnalyzer) => new AssemblyMemberAccessNode_1.AssemblyMemberAccessNode(assemblyMemberAccess, uri, rootPath, documentsAnalyzer),
    CatchClause: (catchClause, uri, rootPath, documentsAnalyzer) => new CatchClauseNode_1.CatchClauseNode(catchClause, uri, rootPath, documentsAnalyzer),
    FileLevelConstant: (fileLevelConstant, uri, rootPath, documentsAnalyzer) => new FileLevelConstantNode_1.FileLevelConstantNode(fileLevelConstant, uri, rootPath, documentsAnalyzer),
    CustomErrorDefinition: (customErrorDefinition, uri, rootPath, documentsAnalyzer) => new CustomErrorDefinitionNode_1.CustomErrorDefinitionNode(customErrorDefinition, uri, rootPath, documentsAnalyzer),
    RevertStatement: (revertStatement, uri, rootPath, documentsAnalyzer) => new RevertStatementNode_1.RevertStatementNode(revertStatement, uri, rootPath, documentsAnalyzer),
});
//# sourceMappingURL=matcher.js.map